<?php

/*
 * This file is part of the NAD package.
 *
 * (c) Ivan Proskuryakov
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace NAD\CartBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CartRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CartRepository extends EntityRepository
{

    /**
     * Add product to cart
     *
     * @param \NAD\FrontendUserBundle\Entity\FrontendUser $user
     * @param \NAD\ProductBundle\Entity\Product           $product
     * @param int                                           $qty
     *
     * @return \NAD\CartBundle\Entity\Cart $cartItem
     */
    public function addProduct($user, $product, $qty)
    {
        $em = $this->getEntityManager();

        if ($cartItem = $this->findProduct($user, $product)) {
            $originalQty = $cartItem->getQty();
            $newQty = $originalQty + $qty;
            $cartItem->setQty($newQty);
        } else {
            $cartItem = new Cart();
            $cartItem->setFrontenduser($user);
            $cartItem->setProduct($product);
            $cartItem->setQty($qty);
        }
        $em->persist($cartItem);
        $em->flush();

        return $cartItem;
    }

    /**
     * Update product in cart
     *
     * @param \NAD\FrontendUserBundle\Entity\FrontendUser $user
     * @param \NAD\ProductBundle\Entity\Product           $product
     * @param int                                           $qty
     *
     * @return \NAD\CartBundle\Entity\Cart $total
     */
    public function updateProduct($user, $product, $qty = null)
    {
        $em = $this->getEntityManager();
        $cartItem = $this->findProduct($user, $product);

        // if cart item exists
        if ($cartItem) {
            if ($qty) {
                $cartItem->setQty($qty);
                $cartItem->setUpdatedAt(new \DateTime(date('Y-m-d H:i:s')));
                $em->persist($cartItem);
                $em->flush();
            } else {
                $em->remove($cartItem);
                $em->flush();
            }
        }

        return $cartItem;
    }

    /**
     * Find product in cart
     *
     * @param \NAD\FrontendUserBundle\Entity\FrontendUser $user
     * @param \NAD\ProductBundle\Entity\Product           $product
     *
     * @return \NAD\CartBundle\Entity\Cart $cartItem
     */
    public function findProduct($user, $product)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('c')
            ->from('NADCartBundle:Cart', 'c')
            ->where('c.product = :productId')->setParameter('productId', $product->getId())
            ->andWhere('c.frontenduser = :userId')->setParameter('userId', $user->getId());
        $cartItem = $query->getQuery()->getResult();

        if ($cartItem) return $cartItem[0];
        return false;
    }

}
